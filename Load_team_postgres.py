from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.hooks.postgres_hook import PostgresHook
from airflow.utils.dates import days_ago
from datetime import timedelta
import json
import requests
import logging
import time
import os


# === –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö ===
def load_team_data_to_postgres():
    api_key = '3f7d70c4-f8ca-42c9-98cb-3d1bdcc34ba7'  # –ü—Ä–∏–º–µ—Ä –∫–ª—é—á–∞ API
    headers = {'Authorization': f'Bearer {api_key}'}
    file_path = '/opt/airflow/dags/new_team.json'  # –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ team_id

    if not os.path.exists(file_path):
        logging.warning("‚ö†Ô∏è –§–∞–π–ª —Å team_id –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(file_path, 'r') as f:
        team_ids = json.load(f)

    hook = PostgresHook(postgres_conn_id='Postgres_ROZA')
    conn = hook.get_conn()
    cursor = conn.cursor()

    insert_query = """
        INSERT INTO raw_team_members  (
            team_id,
            game,
            leader_id,
            player_id,
            nickname,
            load_date
        )
        VALUES (%s, %s, %s, %s, %s, %s)
        ON CONFLICT (team_id, player_id) DO NOTHING;
    """

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    def fetch_with_one_attempt(url, headers):
        try:
            response = requests.get(url, headers=headers, timeout=(5, 10))
            response.raise_for_status()  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 200, –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            return response.json()
        except requests.exceptions.RequestException as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}: {e}")
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
    for idx, team_id in enumerate(team_ids):
        url = f"https://open.faceit.com/data/v4/teams/{team_id}"  # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ
        start_time = time.time()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        data = fetch_with_one_attempt(url, headers)

        if data:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
            team_id = data.get("team_id")
            game = data.get("game")
            leader = data.get("leader")
            members = data.get("members", [])

            for member in members:
                player_id = member.get("user_id")
                nickname = member.get("nickname")

                cursor.execute(insert_query, (
                    team_id,
                    game,
                    leader,
                    player_id,
                    nickname,
                    time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())  # –í—Ä–µ–º—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                ))

            logging.info(
                f"[{idx + 1}/{len(team_ids)}] ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫")
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ team_id –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è NULL
            cursor.execute(insert_query, (
                team_id,
                None,  # game
                None,  # leader_id
                None,  # player_id
                None,  # nickname
                time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())  # –í—Ä–µ–º—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            ))
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team_id}. –í—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ team_id.")

        conn.commit()  # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É
        time.sleep(0.2)  # –æ—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    cursor.close()
    conn.close()
    logging.info("üéâ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")


# === DAG –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ===
default_args = {
    'owner': 'airflow',
    'retries': 3,
    'retry_delay': timedelta(minutes=5),
}

dag = DAG(
    'load_teams_to_postgres',
    description='–ó–∞–≥—Ä—É–∑–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ Postgres —Å Faceit API',
    schedule_interval=None,
    start_date=days_ago(1),
    catchup=False,
    default_args=default_args,
)

load_teams_task = PythonOperator(
    task_id='load_teams_to_postgres',
    python_callable=load_team_data_to_postgres,
    dag=dag,
    execution_timeout=timedelta(hours=2),
)
